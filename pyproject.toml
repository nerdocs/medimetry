[build-system]
requires = ["setuptools>=80"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["readme"]
name = "medimetry"
version = "0.0.1"
license = "MIT"
license-files = ["LICENSE"]
description = "Medical calculation library for clinical formulas and scores"
authors = [{ name = "Christian Gonzalez", email = "office@nerdocs.at" }]
classifiers = [
  # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: Unix",
  "Operating System :: POSIX",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Utilities",
  "Topic :: Scientific/Engineering :: Medical Science Apps",
]
keywords = [
  "medical",
  "medicine",
  "calculation",
  "formula",
  "calc",
  "risk",
  "score",
]
requires-python = ">=3.11"
dependencies = []

[dependency-groups]
dev = ["jinja2", "tox", { include-group = "test" }]
test = ["pytest"]

[project.urls]
"Sources" = "https://github.com/nerdocs/medimetry"
"Changelog" = "https://github.com/nerdocs/medimetry/blob/master/CHANGELOG.md"
"Issue Tracker" = "https://github.com/nerdocs/medimetry/issues"

[tool.setuptools.dynamic]
readme = { file = ["README.md"] }

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
line-length = 140
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.lint.per-file-ignores]
"ci/*" = ["S"]

[tool.ruff.lint]
ignore = [
  "RUF001",  # ruff-specific rules ambiguous-unicode-character-string
  "S101",    # flake8-bandit assert
  "S308",    # flake8-bandit suspicious-mark-safe-usage
  "S603",    # flake8-bandit subprocess-without-shell-equals-true
  "S607",    # flake8-bandit start-process-with-partial-path
  "E501",    # pycodestyle line-too-long
  "PLC0415", # `import` should be at the top-level of a file

  "PT011", # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception

]
select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "E",   # pycodestyle errors
  "EXE", # flake8-executable
  "F",   # pyflakes
  "I",   # isort
  "INT", # flake8-gettext
  "PIE", # flake8-pie
  "PLC", # pylint convention
  "PLE", # pylint errors
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RSE", # flake8-raise
  "RUF", # ruff-specific rules
  "S",   # flake8-bandit
  "UP",  # pyupgrade
  "W",   # pycodestyle warnings
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true

[tool.ruff.format]
quote-style = "double"
